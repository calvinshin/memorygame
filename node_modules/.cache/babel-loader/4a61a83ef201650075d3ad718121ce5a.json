{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calvin2\\\\Desktop\\\\Repo\\\\memorygame\\\\src\\\\App.js\";\nimport React from 'react';\nimport cards from \"./cards.json\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\"; // import shuffle from \"./functions/shuffle\"\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      alreadyClicked: [],\n      gameState: true,\n      score: 0\n    };\n\n    this.shuffle = image => {\n      // only shuffle if the gameState = true;\n      if (this.state.gameState === true) {\n        // Determine if the value exists in the array or not;\n        if (this.state.alreadyClicked.filter(element => {\n          return element.indexOf(image) !== -1;\n        }).length !== 0) {\n          console.log(\"Game OVER!\");\n          this.setState({\n            gameState: false\n          });\n        } else {\n          // Increase the score\n          let newScore = this.state.score + 1;\n          this.setState({\n            score: newScore\n          }); // First create a sliced version of the array\n\n          let newAlreadyClicked = this.state.alreadyClicked.slice(); // push the new link into the array\n\n          newAlreadyClicked.push(image); // Set the state for alreadyClicked to the new array\n\n          this.setState({\n            alreadyClicked: newAlreadyClicked\n          }); // Shuffle the array\n\n          for (let i = cards.length - 1; i > 0; i--) {\n            let j = Number;\n            j = Math.floor(Math.random() * (i + 1));\n            var _ref = [cards[j], cards[i]];\n            cards[i] = _ref[0];\n            cards[j] = _ref[1];\n          } // Set the state of the new array\n\n\n          this.setState({\n            cards: cards\n          });\n        }\n      } else {\n        console.log(\"Game is already over, gotta restart\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      score: this.state.score,\n      gameState: this.state.gameState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, cards.map(card => React.createElement(Card, {\n      image: card.image,\n      key: card.id,\n      click: this.shuffle,\n      id: card.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Calvin2\\Desktop\\Repo\\memorygame\\src\\App.js"],"names":["React","cards","Jumbotron","Card","App","Component","state","alreadyClicked","gameState","score","shuffle","image","filter","element","indexOf","length","console","log","setState","newScore","newAlreadyClicked","slice","push","i","j","Number","Math","floor","random","render","map","card","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport cards from \"./cards.json\"\n\nimport Jumbotron from \"./components/Jumbotron\"\nimport Card from \"./components/Card\"\n\n// import shuffle from \"./functions/shuffle\"\n\nclass App extends React.Component {\n  state = {\n    cards,\n    alreadyClicked : [],\n    gameState: true,\n    score: 0\n  }\n\n  shuffle = image => {\n    // only shuffle if the gameState = true;\n    if(this.state.gameState === true) {\n      // Determine if the value exists in the array or not;\n      if(this.state.alreadyClicked.filter(element => {return element.indexOf(image) !== -1}).length !== 0) {\n        console.log(\"Game OVER!\")\n        this.setState({gameState:false})\n      }\n      else {\n      // Increase the score\n      let newScore = this.state.score + 1;\n      this.setState({score:newScore});\n\n      // First create a sliced version of the array\n      let newAlreadyClicked = this.state.alreadyClicked.slice();\n      // push the new link into the array\n      newAlreadyClicked.push(image);\n      // Set the state for alreadyClicked to the new array\n      this.setState({alreadyClicked : newAlreadyClicked})\n\n      // Shuffle the array\n      for(let i = cards.length - 1; i > 0; i -- ) {\n        let j = Number;\n        j = Math.floor(Math.random() * (i + 1));\n        [cards[i], cards[j]] = [cards[j], cards[i]];\n      }\n\n      // Set the state of the new array\n      this.setState({cards:cards})\n      }\n    }\n    else {\n      console.log(\"Game is already over, gotta restart\")\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron \n          score = {this.state.score}\n          gameState = {this.state.gameState}\n        />\n        <div className=\"\">\n          {cards.map(card =>\n            <Card\n              image = {card.image}\n              key = {card.id}\n              click = {this.shuffle}\n              id = {card.id} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}