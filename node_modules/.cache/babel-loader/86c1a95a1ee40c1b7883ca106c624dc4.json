{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calvin2\\\\Desktop\\\\Repo\\\\memorygame\\\\src\\\\App.js\";\nimport React from 'react';\nimport cards from \"./cards.json\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\"; // import shuffle from \"./functions/shuffle\"\n\nconst alreadyClicked = [];\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      alreadyClicked\n    };\n\n    this.shuffle = image => {\n      // Determine if the value exists in the array or not;\n      this.state.alreadyClicked.filter(image => image.indexOf()); // First create a sliced version of the array\n\n      let newAlreadyClicked = this.state.alreadyClicked.slice(); // push the new link into the array\n\n      newAlreadyClicked.push(image); // Set the state for alreadyClicked to the new array\n\n      this.setState({\n        alreadyClicked: newAlreadyClicked\n      }); // Shuffle the array\n\n      for (let i = cards.length - 1; i > 0; i--) {\n        let j = Number;\n        j = Math.floor(Math.random() * (i + 1));\n        var _ref = [cards[j], cards[i]];\n        cards[i] = _ref[0];\n        cards[j] = _ref[1];\n      } // Set the state of the new array\n\n\n      this.setState({\n        cards: cards\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, cards.map(card => React.createElement(Card, {\n      image: card.image,\n      key: card.id,\n      click: this.shuffle,\n      id: card.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;\n\nfunction filterItems(fruits, query) {\n  return fruits.filter(function (el) {\n    return el.toLowerCase().indexOf('ap'.toLowerCase()) !== -1;\n  });\n}\n\nconsole.log(filterItems(fruits, 'ap')); // ['apple', 'grapes']","map":{"version":3,"sources":["C:\\Users\\Calvin2\\Desktop\\Repo\\memorygame\\src\\App.js"],"names":["React","cards","Jumbotron","Card","alreadyClicked","App","Component","state","shuffle","image","filter","indexOf","newAlreadyClicked","slice","push","setState","i","length","j","Number","Math","floor","random","render","map","card","id","filterItems","fruits","query","el","toLowerCase","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CAEA;;AAEA,MAAMC,cAAc,GAAG,EAAvB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AAACN,MAAAA,KAAD;AAAQG,MAAAA;AAAR,KADwB;;AAAA,SAGhCI,OAHgC,GAGtBC,KAAK,IAAI;AACjB;AACA,WAAKF,KAAL,CAAWH,cAAX,CAA0BM,MAA1B,CAAiCD,KAAK,IAAIA,KAAK,CAACE,OAAN,EAA1C,EAFiB,CAIjB;;AACA,UAAIC,iBAAiB,GAAG,KAAKL,KAAL,CAAWH,cAAX,CAA0BS,KAA1B,EAAxB,CALiB,CAMjB;;AACAD,MAAAA,iBAAiB,CAACE,IAAlB,CAAuBL,KAAvB,EAPiB,CAQjB;;AACA,WAAKM,QAAL,CAAc;AAACX,QAAAA,cAAc,EAAGQ;AAAlB,OAAd,EATiB,CAWjB;;AACA,WAAI,IAAII,CAAC,GAAGf,KAAK,CAACgB,MAAN,GAAe,CAA3B,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA4C;AAC1C,YAAIE,CAAC,GAAGC,MAAR;AACAD,QAAAA,CAAC,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,CAAC,GAAG,CAArB,CAAX,CAAJ;AAF0C,mBAGnB,CAACf,KAAK,CAACiB,CAAD,CAAN,EAAWjB,KAAK,CAACe,CAAD,CAAhB,CAHmB;AAGzCf,QAAAA,KAAK,CAACe,CAAD,CAHoC;AAG/Bf,QAAAA,KAAK,CAACiB,CAAD,CAH0B;AAI3C,OAhBgB,CAiBjB;;;AACA,WAAKH,QAAL,CAAc;AAACd,QAAAA,KAAK,EAACA;AAAP,OAAd;AACD,KAtB+B;AAAA;;AAwBhCsB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGtB,KAAK,CAACuB,GAAN,CAAUC,IAAI,IACb,oBAAC,IAAD;AACE,MAAA,KAAK,EAAIA,IAAI,CAAChB,KADhB;AAEE,MAAA,GAAG,EAAIgB,IAAI,CAACC,EAFd;AAGE,MAAA,KAAK,EAAI,KAAKlB,OAHhB;AAIE,MAAA,EAAE,EAAIiB,IAAI,CAACC,EAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAFF,CADF;AAaD;;AAtC+B;;AAyClC,eAAerB,GAAf;;AAKA,SAASsB,WAAT,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClC,SAAOD,MAAM,CAAClB,MAAP,CAAc,UAASoB,EAAT,EAAa;AAC9B,WAAOA,EAAE,CAACC,WAAH,GAAiBpB,OAAjB,CAAyB,KAAKoB,WAAL,EAAzB,MAAiD,CAAC,CAAzD;AACH,GAFM,CAAP;AAGD;;AAEDC,OAAO,CAACC,GAAR,CAAYN,WAAW,CAACC,MAAD,EAAS,IAAT,CAAvB,E,CAAwC","sourcesContent":["import React from 'react';\nimport cards from \"./cards.json\"\n\nimport Jumbotron from \"./components/Jumbotron\"\nimport Card from \"./components/Card\"\n\n// import shuffle from \"./functions/shuffle\"\n\nconst alreadyClicked = []\n\nclass App extends React.Component {\n  state = {cards, alreadyClicked}\n\n  shuffle = image => {\n    // Determine if the value exists in the array or not;\n    this.state.alreadyClicked.filter(image => image.indexOf())\n\n    // First create a sliced version of the array\n    let newAlreadyClicked = this.state.alreadyClicked.slice();\n    // push the new link into the array\n    newAlreadyClicked.push(image);\n    // Set the state for alreadyClicked to the new array\n    this.setState({alreadyClicked : newAlreadyClicked})\n\n    // Shuffle the array\n    for(let i = cards.length - 1; i > 0; i -- ) {\n      let j = Number;\n      j = Math.floor(Math.random() * (i + 1));\n      [cards[i], cards[j]] = [cards[j], cards[i]];\n    }\n    // Set the state of the new array\n    this.setState({cards:cards})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron />\n        <div className=\"\">\n          {cards.map(card =>\n            <Card\n              image = {card.image}\n              key = {card.id}\n              click = {this.shuffle}\n              id = {card.id} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\nfunction filterItems(fruits, query) {\n  return fruits.filter(function(el) {\n      return el.toLowerCase().indexOf('ap'.toLowerCase()) !== -1;\n  })\n}\n\nconsole.log(filterItems(fruits, 'ap')); // ['apple', 'grapes']"]},"metadata":{},"sourceType":"module"}